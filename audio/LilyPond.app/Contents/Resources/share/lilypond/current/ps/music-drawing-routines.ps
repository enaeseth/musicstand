%!PS-Adobe-1.0: music-drawing-routines.ps
%
% Functions for direct and embedded PostScript

% Careful with double % as comment prefix.
% Any %%X comment is interpreted as DSC comments.

% TODO: use dicts or prefixes to prevent namespace pollution.

/pdfmark where
{pop} {userdict /pdfmark /cleartomark load put} ifelse


% llx lly urx ury URI
/mark_URI
{
    /uri exch def
    /ury exch def
    /urx exch def
    /lly exch def
    /llx exch def
    [
	/Rect [ llx lly urx ury ]
	
	/Border [ 0 0 0 ]

        /Action
	    <<
		/Subtype /URI
		/URI uri
	    >>
        /Subtype /Link
    /ANN
    pdfmark
}
bind def

% from adobe tech note 5002. 
/BeginEPSF { %def
    /b4_Inc_state save def % Save state for cleanup
    /dict_count countdictstack def % Count objects on dict stack
    /op_count count 1 sub def % Count objects on operand stack
    userdict begin % Push userdict on dict stack
    /showpage { } def % Redefine showpage, { } = null proc
    0 setgray 0 setlinecap % Prepare graphics state
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    /languagelevel where % If level not equal to 1 then
    {pop languagelevel % set strokeadjust and
    1 ne % overprint to their defaults.
      {false setstrokeadjust false setoverprint
      } if
    } if
} bind def

/EndEPSF { %def
  count op_count sub {pop} repeat % Clean up stacks
  countdictstack dict_count sub {end} repeat
  b4_Inc_state restore
} bind def 

/stroke_and_fill {
	gsave
		stroke
	grestore
	fill
} bind def

/vector_add { % x1 y1 x2 y2 vector_add x1+x2 y1+y2
	exch
	4 1 roll
	add
	3 1 roll
	add
	exch
} bind def

/draw_round_box % width height x y blot
{
	setlinewidth % w h x y
	0 setlinecap
	1 setlinejoin

	rmoveto % w h
	currentpoint % w h x1 y1
	4 2 roll % x1 y1 w h
	4 copy
	rectfill
	rectstroke
} bind def

/draw_polygon % fill? x(n) y(n) x(n-1) y(n-1) ... x(0) y(0) n blot
{
	setlinewidth %set to blot

	0 setlinecap
	1 setlinejoin

	3 1 roll
	/polygon_x
	currentpoint
	/polygon_y exch def
	def
	rmoveto % x(0) y(0)
	{ polygon_x polygon_y vector_add lineto } repeat % n times
	closepath 
	{ %fill?
		stroke_and_fill
	}{
		stroke
	} ifelse
} bind def

/draw_repeat_slash % x-width width height draw_repeat_slash
{
	2 index % duplicate x-width
	1 setlinecap
	1 setlinejoin
	
	  0  rlineto % x-width 0
	     rlineto % width height
	neg 0 rlineto % -x-width 0
	closepath fill
} bind def

% this is for drawing slurs and barre-indicators.
/draw_bezier_sandwich  % thickness controls
{
	gsave
	currentpoint translate
    % round ending and round beginning
    1 setlinejoin 1 setlinecap
	setlinewidth
	moveto
	curveto
	lineto
	curveto
	closepath
	stroke_and_fill
	grestore
} bind def

/draw_dot % radius x y draw_dot
{
	rmoveto
	currentpoint
	3 2 roll
	0 360 arc closepath stroke_and_fill
} bind def

/draw_circle % filled? radius thickness draw_circle
{
	setlinewidth	% f? r
	currentpoint	% f? r x0 y0
	3 2 roll	% f? x0 y0 r
	dup 0 rmoveto
	0 360 arc closepath
		{ stroke_and_fill } 
		{ stroke }
	ifelse
} bind def

/draw_oval % filled? x-radius y-radius thickness draw_ellipse
{
  setlinewidth % f? x-r y-r
  /yrad exch def
  /xrad exch def
  xrad 0 rmoveto
  0 yrad -2 xrad mul dup yrad exch 0 rcurveto
  0 yrad neg dup 2 xrad mul dup 3 1 roll 0 rcurveto
  closepath
      { stroke_and_fill}
      { stroke }
  ifelse
} bind def

/draw_ellipse % filled? x-radius y-radius thickness draw_ellipse
{
  setlinewidth % f? x-r y-r
  /savematrix matrix currentmatrix def
  scale % f?
  currentpoint
  1 0 rmoveto
  1 0 360  arc closepath
  savematrix setmatrix
             { stroke_and_fill}
             { stroke }
  ifelse
} bind def

/draw_line % dx dy x1 y1 thickness draw_line
{
	setlinewidth % dx dy x1 y1
	1 setlinecap
	1 setlinejoin
	rmoveto % dx dy
	rlineto
	stroke
} bind def

/draw_dashed_line % dx dy thickness dashpattern offset draw_dashed_line
{
	1 setlinecap
	1 setlinejoin
	setdash % dx dy thickness
	setlinewidth %dx dy
	rlineto
	stroke
	[] 0 setdash % reset dash pattern
} bind def

/draw_dashed_slur % controls thickness dash
{
gsave
	currentpoint translate
	1 setlinecap
	1 setlinejoin
	setdash
	setlinewidth
	8 2 roll
	moveto
	curveto
	stroke
grestore
} bind def

/print_glyphs % dx dy glyph print_glyphs
{
	{
		currentpoint %dx dy glyph x0 y0
		3 2 roll %dx dy x0 y0 glyph
		glyphshow % dx dy x0 y0
		moveto % dx dy
		rmoveto
	}repeat
}bind def
%end music-drawing-routines.ps
